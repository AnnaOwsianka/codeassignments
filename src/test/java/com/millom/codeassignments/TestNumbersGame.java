package com.millom.codeassignments;

import java.util.List;
import java.util.concurrent.ExecutionException;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class TestNumbersGame {

  private NumbersGame numbersGame;
  private static final Integer[] NUMBERS = {17844, 13708, 5940, 640, 9791, 30659, 10192, 29936,
      26235, 11113, 3835, 14261, 27139, 3181, 297, 21793, 28325, 7123, 26160, 3820, 12062, 26417,
      19647, 11155, 31937, 8996, 15130, 17168, 28639, 12582, 26912, 15089, 21932, 12827, 3478, 5267,
      29938, 28963, 15873, 14735, 6553, 4638, 7801, 14890, 10830, 9173, 2002, 10515, 17584, 9229,
      30539, 7356, 4725, 24933, 25575, 719, 5178, 3530, 19500, 2569, 5758, 20599, 19777, 31676,
      2763, 12603, 22087, 32458, 9187, 10447, 23098, 10870, 11588, 27351, 1812, 17880, 27732, 6186,
      2188, 11733, 6737, 27202, 7011, 11201, 10997, 30950, 26554, 4499, 30540, 17534, 15873, 15379,
      7480, 31303, 32481, 5485, 22909, 10318, 10901, 22137, 22318, 16003, 4839, 3819, 29020, 29365,
      26158, 30663, 15492, 3198, 9905, 18046, 9452, 12158, 2251, 32748, 4870, 4081, 11689, 24017,
      18598, 10282, 1959, 27075, 14487, 21763, 19496, 27388, 22289, 22989, 22986, 5853, 13903,
      32279, 12575, 63, 23085, 23463, 17713, 12013, 29105, 21970, 3716, 1487, 31770, 11506, 24832,
      27509, 30105, 16974, 9456, 14752, 17336, 28341, 19704, 19713, 8950, 21388, 14651, 28713,
      16685, 12179, 3766, 24542, 1849, 16621, 11904, 30084, 26520, 25029, 26212, 23807, 3581, 4124,
      12915, 8465, 31671, 27900, 21419, 15585, 3536, 25806, 8617, 28701, 7471, 2918, 31178, 29904,
      1792, 14191, 25089, 15148, 29259, 9382, 17616, 23881, 8240, 19238, 22600, 25368, 19836, 16979,
      24735, 29526, 12759, 20046, 9133, 15018, 2185, 28181, 22581, 5604, 14774, 29415, 18898, 5950,
      32564, 22661, 9814, 25754, 16909, 7320, 26712, 30055, 19888, 4422, 6455, 3558, 4156, 3365,
      6652, 1905, 7492, 5184, 31956, 32387, 26989, 29978, 9250, 16310, 24173, 22468, 5025, 22072,
      2743, 9298, 12252, 21286, 8097, 8745, 19655, 19960, 31875, 10073, 23263, 3093, 22551, 22734,
      19971, 23024, 17763, 395, 25588, 14243, 13338, 6428, 6958, 3359, 32217, 20410, 21806, 24314,
      11048, 28356, 12657, 29398, 21795, 7608, 22348, 22076, 792, 16380, 21178, 14615, 16070, 18665,
      24507, 31762, 11961, 6378, 14681, 4943, 18815, 14212, 25570, 16685, 32049, 22444, 2965, 5418,
      1460, 8157, 29597, 21828, 29808, 9507, 8407, 3332, 12639, 21593, 16788, 24730, 24100, 16017,
      11544, 13476, 5420, 13204, 15518, 25735, 26792, 4013, 23669, 16657, 18921, 25791, 22831,
      21853, 24180, 13265, 31542, 12043, 9686, 17600, 17398, 20565, 6274, 11577, 4637, 28324, 25824,
      22531, 21412, 16091, 14997, 8201, 27825, 29072, 16649, 22512, 21888, 27759, 8940, 15462,
      32207, 18164, 16562, 27697, 1490, 15835, 30907, 20564, 29585, 29405, 6399, 4612, 32644, 18599,
      28941, 11620, 13196, 14737, 6883, 13385, 21658, 27539, 8853, 4998, 20948, 19702, 17392, 24471,
      23269, 3325, 17425, 20889, 17666, 4224, 22857, 20828, 7176, 24169, 30002, 16872, 30444, 3299,
      12557, 26629, 21720, 25291, 5156, 32012, 23307, 20012, 17596, 19819, 25668, 14905, 5894,
      17239, 11526, 31684, 1448, 25234, 25077, 14611, 10580, 25709, 19238, 14396, 28846, 25923,
      9844, 17397, 12999, 14159, 23904, 19224, 20728, 27368, 23930, 3529, 6855, 6985, 25837, 16644,
      30035, 17272, 13382, 30250, 30372, 5021, 18348, 30682, 15257, 21302, 8760, 12372, 703, 31571,
      12694, 10870, 21900, 31757, 30976, 28424, 13662, 17618, 23946, 16657, 23399, 27246, 27279,
      2430, 14817, 2919, 16473, 12520, 27812, 2594, 20569, 6413, 11119, 2820, 24316, 618, 2287,
      3966, 7895, 24807, 499, 11867, 4858, 3267, 3948, 14557, 21327, 7667, 28495, 11902, 30001,
      26826, 23660, 23529, 7976, 14337, 23282, 26997, 12738, 26430, 7711, 13645, 26699, 13780,
      11537, 21895, 20964, 2960, 17832, 15102, 31433, 15409, 17207, 27875, 15847, 10371, 19131,
      16991, 6920, 24128, 16014, 3958, 17881, 13145, 14049, 31145, 29508, 6755, 23681, 12943, 25463,
      12288, 2054, 26432, 21023, 12755, 16066, 19449, 1141, 22699, 23282, 28193, 28868, 31123,
      12437, 7956, 1325, 27415, 18911, 29709, 1555, 24380, 3347, 2727, 6671, 26716, 1534, 2995,
      12712, 18582, 11011, 22057, 10457, 23704, 1459, 21076, 4636, 10663, 10052, 5619, 8305, 30883,
      20131, 15589, 4966, 15103, 31035, 14186, 17698, 19255, 14085, 25654, 21278, 5925, 11866,
      17794, 29096, 29298, 21417, 5311, 15179, 25175, 23530, 29052, 6978, 11662, 22667, 6564, 28590,
      11858, 17001, 12892, 15818, 18114, 10016, 12187, 7418, 700, 7299, 512, 3512, 20424, 30990,
      15761, 9765, 22424, 25876, 6758, 24355, 5356, 5935, 12217, 8002, 19483, 12628};

  @Before
  public void setup() {
    numbersGame = new NumbersGame(NUMBERS);
  }

  @Test
  public void testClosestNumbers() {
    // todo: set correct expectation
    int expectClosest = 88;
    Assert.assertEquals(expectClosest, numbersGame.closestNumbers());
  }

  @Test
  public void testSortedNumbers() {
    List<Integer> sorted = numbersGame.getSortedNumbers();

    // todo: implement test to verify result
  }

  @Test
  public void testSum() {
    // todo: set correct expectation
    long expectedSum = 88;
    Assert.assertEquals(expectedSum, numbersGame.sum());
  }

  @Test
  public void testSumOfOdds() {
    // todo: set correct expectation
    long expectedSum = 33;
    Assert.assertEquals(expectedSum, numbersGame.sumOfOdds());
  }

  @Test
  public void testSumOEvens() {
    // todo: set correct expectation
    long expectedSum = 44;
    Assert.assertEquals(expectedSum, numbersGame.sumOfEvens());
  }

  @Test
  public void testSumOfEvensAndOddsEqualsSum() {
    // todo: implement a test that shows that "sumOfEvens() + sumOfOdds == sum()"
  }

  @Test
  public void testAsyncSum() throws ExecutionException, InterruptedException {
    // todo: set correct expectation
    Long expectedSum = 100L;
    Assert.assertEquals(expectedSum, numbersGame.sumAsync().get());
  }

  @Test
  public void testAsyncSumOfOdds() throws ExecutionException, InterruptedException {
    // todo: set correct expectation
    Long expectedSum = 88L;
    Assert.assertEquals(expectedSum, numbersGame.sumOfOddsAsync().get());
  }

  @Test
  public void testAsyncSumOfEvens() throws ExecutionException, InterruptedException {
    // todo: set correct expectation
    Long expectedSum = 88L;
    Assert.assertEquals(expectedSum, numbersGame.sumOfEvensAsync().get());
  }

  @Test
  public void testAsyncSumOfEvensAndOddsEqualsSum() {
    // todo: implement a test that shows that "sumOfEvensAsync() + sumOfOddsAsync == sumAsync()"
  }

}
